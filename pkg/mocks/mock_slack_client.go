// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grafana/flagger-k6-webhook/pkg/slack (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSlackClient is a mock of Client interface.
type MockSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientMockRecorder
}

// MockSlackClientMockRecorder is the mock recorder for MockSlackClient.
type MockSlackClientMockRecorder struct {
	mock *MockSlackClient
}

// NewMockSlackClient creates a new mock instance.
func NewMockSlackClient(ctrl *gomock.Controller) *MockSlackClient {
	mock := &MockSlackClient{ctrl: ctrl}
	mock.recorder = &MockSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClient) EXPECT() *MockSlackClientMockRecorder {
	return m.recorder
}

// AddFileToThreads mocks base method.
func (m *MockSlackClient) AddFileToThreads(arg0 map[string]string, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileToThreads", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileToThreads indicates an expected call of AddFileToThreads.
func (mr *MockSlackClientMockRecorder) AddFileToThreads(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileToThreads", reflect.TypeOf((*MockSlackClient)(nil).AddFileToThreads), arg0, arg1, arg2)
}

// SendMessages mocks base method.
func (m *MockSlackClient) SendMessages(arg0 []string, arg1, arg2 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessages", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessages indicates an expected call of SendMessages.
func (mr *MockSlackClientMockRecorder) SendMessages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessages", reflect.TypeOf((*MockSlackClient)(nil).SendMessages), arg0, arg1, arg2)
}

// UpdateMessages mocks base method.
func (m *MockSlackClient) UpdateMessages(arg0 map[string]string, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessages", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessages indicates an expected call of UpdateMessages.
func (mr *MockSlackClientMockRecorder) UpdateMessages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessages", reflect.TypeOf((*MockSlackClient)(nil).UpdateMessages), arg0, arg1, arg2)
}
